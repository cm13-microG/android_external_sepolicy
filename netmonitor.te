###
### Netmonitor.
###
### This file defines the rules for netmonitor.
### Apps are labeled based on mac_permissions.xml (maps signer and
### optionally package name to seinfo value) and seapp_contexts (maps UID
### and optionally seinfo value to domain for process and type for data
### directory).  The netmonitor domain is the default assignment in
### seapp_contexts for any app with UID between APP_AID (10000)
### and AID_ISOLATED_START (99000) if the app has no specific seinfo
### value as determined from mac_permissions.xml.  In current AOSP, this
### domain is assigned to all non-system apps as well as to any system apps
### that are not signed by the platform key.  To move
### a system app into a specific domain, add a signer entry for it to
### mac_permissions.xml and assign it one of the pre-existing seinfo values
### or define and use a new seinfo value in both mac_permissions.xml and
### seapp_contexts.
###
### This is a copy of untrusted_app.te
### ==================================
### netmonitor includes all the appdomain rules, plus the
### additional following rules:
###

type netmonitor, domain;
app_domain(netmonitor)
net_domain(netmonitor)
bluetooth_domain(netmonitor)

# Read access to /proc/net
r_dir_file(netmonitor, proc_net)

# Some apps ship with shared libraries and binaries that they write out
# to their sandbox directory and then execute.
allow netmonitor app_data_file:file { rx_file_perms execmod };

allow netmonitor tun_device:chr_file rw_file_perms;

# ASEC
allow netmonitor asec_apk_file:file r_file_perms;
# Execute libs in asec containers.
allow netmonitor asec_public_file:file { execute execmod };

# Allow the allocation and use of ptys
# Used by: https://play.google.com/store/apps/details?id=jackpal.androidterm
create_pty(netmonitor)

# Used by Finsky / Android "Verify Apps" functionality when
# running "adb install foo.apk".
# TODO: Long term, we don't want apps probing into shell data files.
# Figure out a way to remove these rules.
allow netmonitor shell_data_file:file r_file_perms;
allow netmonitor shell_data_file:dir r_dir_perms;

# b/18504118: Allow reads from /data/anr/traces.txt
# TODO: We shouldn't be allowing all netmonitors to read
# this file. This is only needed for the GMS feedback agent.
# See also b/18340553. GMS runs as netmonitor, and
# it's too late to change the domain it runs in.
# This line needs to be deleted.
allow netmonitor anr_data_file:file r_file_perms;

# Read and write system app data files passed over Binder.
# Motivating case was /data/data/com.android.settings/cache/*.jpg for
# cropping or taking user photos.
allow netmonitor system_app_data_file:file { read write getattr };

#
# Rules migrated from old app domains coalesced into netmonitor.
# This includes what used to be media_app, shared_app, and release_app.
#

# Access /dev/mtp_usb.
allow netmonitor mtp_device:chr_file rw_file_perms;

# Access to /data/media.
allow netmonitor media_rw_data_file:dir create_dir_perms;
allow netmonitor media_rw_data_file:file create_file_perms;

# Traverse into /mnt/media_rw for bypassing FUSE daemon
# TODO: narrow this to just MediaProvider
allow netmonitor mnt_media_rw_file:dir search;

# Write to /cache.
allow netmonitor cache_file:dir create_dir_perms;
allow netmonitor cache_file:file create_file_perms;

# allow cts to query all services
allow netmonitor servicemanager:service_manager list;

allow netmonitor drmserver_service:service_manager find;
allow netmonitor healthd_service:service_manager find;
allow netmonitor mediaserver_service:service_manager find;
allow netmonitor nfc_service:service_manager find;
allow netmonitor radio_service:service_manager find;
allow netmonitor surfaceflinger_service:service_manager find;
allow netmonitor app_api_service:service_manager find;

# TODO: remove this once priv-apps are no longer running in netmonitor
allow netmonitor system_api_service:service_manager find;

# TODO: remove and replace with specific package that accesses this
allow netmonitor persistent_data_block_service:service_manager find;

# Allow verifier to access staged apks.
allow netmonitor { apk_tmp_file apk_private_tmp_file }:dir r_dir_perms;
allow netmonitor { apk_tmp_file apk_private_tmp_file }:file r_file_perms;

# only allow unprivileged socket ioctl commands
allow netmonitor domain:{ rawip_socket tcp_socket udp_socket } unpriv_sock_ioctls;

# Allow GMS core to access perfprofd output, which is stored
# in /data/misc/perfprofd/. GMS core will need to list all
# data stored in that directory to process them one by one.
userdebug_or_eng(`
  allow netmonitor perfprofd_data_file:file r_file_perms;
  allow netmonitor perfprofd_data_file:dir r_dir_perms;
')

# Programs routinely attempt to scan through /system, looking
# for files. Suppress the denials when they occur.
dontaudit netmonitor exec_type:file getattr;

###
### neverallow rules
###

# Receive or send uevent messages.
neverallow netmonitor domain:netlink_kobject_uevent_socket *;

# Receive or send generic netlink messages
neverallow netmonitor domain:netlink_socket *;

# Too much leaky information in debugfs. It's a security
# best practice to ensure these files aren't readable.
neverallow netmonitor debugfs:file read;

# Do not allow untrusted apps to register services.
# Only trusted components of Android should be registering
# services.
neverallow netmonitor service_manager_type:service_manager add;

# Do not allow netmonitors to connect to the property service
# or set properties. b/10243159
neverallow netmonitor property_socket:sock_file write;
neverallow netmonitor init:unix_stream_socket connectto;
neverallow netmonitor property_type:property_service set;

# Do not allow netmonitor to be assigned mlstrustedsubject.
# This would undermine the per-user isolation model being
# enforced via levelFrom=user in seapp_contexts and the mls
# constraints.  As there is no direct way to specify a neverallow
# on attribute assignment, this relies on the fact that fork
# permission only makes sense within a domain (hence should
# never be granted to any other domain within mlstrustedsubject)
# and netmonitor is allowed fork permission to itself.
neverallow netmonitor mlstrustedsubject:process fork;

# Do not allow netmonitor to hard link to any files.
# In particular, if netmonitor links to other app data
# files, installd will not be able to guarantee the deletion
# of the linked to file. Hard links also contribute to security
# bugs, so we want to ensure netmonitor never has this
# capability.
neverallow netmonitor file_type:file link;
